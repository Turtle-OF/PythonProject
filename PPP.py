import tkinter as tk
import random
from tkinter import messagebox
import difflib



class OSGame:
    def __init__(self, root):
        self.root = root
        self.root.title("–ì—Ä–∞: –ê–¥–º—ñ–Ω –û–°")

        self.health = 100
        self.updates = 0
        self.viruses = 0
        self.running_programs = []
        self.all_programs = ["Goofle", "Photoship", "–ê–Ω—Ç–∏–≤—ñ—Ä—É—Å", "–ú—É–∑–∏–∫–∞", "Dismur", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"]


        self.status_label = tk.Label(root, text="", font=("Arial", 12))
        self.status_label.pack(pady=10)

        self.message_label = tk.Label(root, text="", font=("Arial", 12), fg="blue")
        self.message_label.pack(pady=10)

        self.buttons_frame = tk.Frame(root)
        self.buttons_frame.pack()

        self.programs_frame = tk.Frame(root)
        self.programs_frame.pack(pady=10)

        self.log_label = tk.Label(root, text="üìù –ñ—É—Ä–Ω–∞–ª –ø–æ–¥—ñ–π:", font=("Arial", 11))
        self.log_label.pack()

        self.log_text = tk.Text(root, height=10, width=60, state="disabled", bg="#f0f0f0")
        self.log_text.pack(pady=5)

        self.create_buttons()
        self.create_program_buttons()
        self.update_status()

    def log_event(self, text):
        self.log_text.config(state="normal")
        self.log_text.insert(tk.END, text + "\n")
        self.log_text.see(tk.END)
        self.log_text.config(state="disabled")

    def create_buttons(self):
        tk.Button(self.buttons_frame, text="üîç –°–∫–∞–Ω—É–≤–∞—Ç–∏ –≤—ñ—Ä—É—Å–∏", command=self.scan_viruses).grid(row=0, column=0, padx=5, pady=5)
        tk.Button(self.buttons_frame, text="üîÑ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è", command=self.install_updates).grid(row=0, column=1, padx=5, pady=5)
        tk.Button(self.buttons_frame, text="üìã –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏", command=self.check_processes).grid(row=1, column=0, padx=5, pady=5)
        tk.Button(self.buttons_frame, text="üò¥ –ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç–∏", command=self.do_nothing).grid(row=1, column=1, padx=5, pady=5)

    def create_program_buttons(self):
        tk.Label(self.programs_frame, text="‚öôÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏:", font=("Arial", 12)).pack()
        for program in self.all_programs:
            frame = tk.Frame(self.programs_frame)
            frame.pack(pady=2)
            tk.Label(frame, text=program).pack(side=tk.LEFT, padx=5)
            tk.Button(frame, text="üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç–∏", command=lambda p=program: self.run_program(p)).pack(side=tk.LEFT)
            tk.Button(frame, text="üî¥ –ó–∞–∫—Ä–∏—Ç–∏", command=lambda p=program: self.close_program(p)).pack(side=tk.LEFT)
            tk.Button(frame, text="‚öôÔ∏è –û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏", command=lambda p=program: self.optimize_program(p)).pack(side=tk.LEFT)

    def update_status(self):
        prog_list = ", ".join(self.running_programs) if self.running_programs else "–Ω–µ–º–∞—î"
        self.status_label.config(
            text=f"–ó–¥–æ—Ä–æ–≤'—è: {self.health}/100 | –û–Ω–æ–≤–ª–µ–Ω–Ω—è: {self.updates}/5 | –í—ñ—Ä—É—Å–∏: {self.viruses}/5\n–ü—Ä–æ–≥—Ä–∞–º–∏: {prog_list}"
        )
        if self.health <= 0:
            self.message_label.config(text="üíÄ –°–∏—Å—Ç–µ–º–∞ –∑–ª–∞–º–∞–Ω–∞. –¢–∏ –ø—Ä–æ–≥—Ä–∞–≤!", fg="red")
            self.log_event("‚ùå –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–ª–∞–º–∞–Ω–∞!")
            self.disable_buttons()
        elif self.updates >= 5 and self.viruses >= 5:
            self.message_label.config(text="üéâ –ü–µ—Ä–µ–º–æ–≥–∞! –°–∏—Å—Ç–µ–º–∞ –≤—Ä—è—Ç–æ–≤–∞–Ω–∞!", fg="green")
            self.log_event("‚úÖ –£—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ –≤—ñ—Ä—É—Å–∏ –≤–∏–¥–∞–ª–µ–Ω–æ. –ü–µ—Ä–µ–º–æ–≥–∞!")
            self.disable_buttons()

    def disable_buttons(self):
        for widget in self.buttons_frame.winfo_children():
            widget.config(state="disabled")
        for widget in self.programs_frame.winfo_children():
            for child in widget.winfo_children():
                if isinstance(child, tk.Button):
                    child.config(state="disabled")

    def scan_viruses(self):
        if random.random() < 0.7:
            self.message_label.config(text="‚úÖ –í—ñ—Ä—É—Å –∑–Ω–∞–π–¥–µ–Ω–æ —ñ –≤–∏–¥–∞–ª–µ–Ω–æ!", fg="green")
            self.viruses += 1
            self.log_event("üõ°Ô∏è –ê–Ω—Ç–∏–≤—ñ—Ä—É—Å –∑–Ω–∞–π—à–æ–≤ —ñ –≤–∏–¥–∞–ª–∏–≤ –≤—ñ—Ä—É—Å.")
            messagebox.showinfo("–ê–Ω—Ç–∏–≤—ñ—Ä—É—Å", "‚úÖ –í—ñ—Ä—É—Å –∑–Ω–∞–π–¥–µ–Ω–æ —ñ –≤–∏–¥–∞–ª–µ–Ω–æ!")
        else:
            dmg = random.randint(5, 15)
            self.message_label.config(text=f"‚ùå –í—ñ—Ä—É—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç—Ä–∞–∂–¥–∞–ª–∞ (-{dmg})", fg="red")
            self.health -= dmg
            self.log_event("‚ö†Ô∏è –ê–Ω—Ç–∏–≤—ñ—Ä—É—Å –Ω–µ –≤–∏—è–≤–∏–≤ –≤—ñ—Ä—É—Å–∏. –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Ä–∏–º–∞–ª–∞ —à–∫–æ–¥—É.")
            messagebox.showwarning("–ê–Ω—Ç–∏–≤—ñ—Ä—É—Å", "‚ùå –í—ñ—Ä—É—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!\n–°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç—Ä–∞–∂–¥–∞–ª–∞.")
        self.update_status()

    def install_updates(self):
        if random.random() < 0.6:
            self.message_label.config(text="üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!", fg="green")
            self.updates += 1
            self.log_event("üì• –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏.")
            messagebox.showinfo("–û–Ω–æ–≤–ª–µ–Ω–Ω—è", "‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            dmg = random.randint(5, 10)
            self.message_label.config(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è! –ó–¥–æ—Ä–æ–≤'—è -{dmg}", fg="red")
            self.health -= dmg
            self.log_event("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –°–∏—Å—Ç–µ–º–∞ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∞.")
            messagebox.showerror("–û–Ω–æ–≤–ª–µ–Ω–Ω—è", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è!\n–°–∏—Å—Ç–µ–º–∞ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∞.")
        self.update_status()

    def check_processes(self):
        dmg = len(self.running_programs) * 2
        self.message_label.config(
            text=f"üìã –ó–∞–ø—É—â–µ–Ω–æ {len(self.running_programs)} –ø—Ä–æ–≥—Ä–∞–º. –°–∏—Å—Ç–µ–º–∞ —Å–ø–æ–≤—ñ–ª—å–Ω–∏–ª–∞—Å—è (-{dmg})", fg="orange"
        )
        self.health -= dmg
        self.log_event(f"üñ•Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—ñ–≤: {len(self.running_programs)} –ø—Ä–æ–≥—Ä–∞–º. –ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–Ω–∏–∑–∏–ª–æ –∑–¥–æ—Ä–æ–≤'—è –Ω–∞ {dmg}.")
        self.update_status()

    def do_nothing(self):
        dmg = random.randint(5, 10)
        self.message_label.config(text=f"üò¥ –¢–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑—Ä–æ–±–∏–≤. –•–∞–∫–µ—Ä–∏ –∞—Ç–∞–∫—É–≤–∞–ª–∏ (-{dmg})", fg="red")
        self.health -= dmg
        self.log_event("üò¥ –ë–µ–∑ –¥—ñ–π. –°–∏—Å—Ç–µ–º–∞ –∞—Ç–∞–∫–æ–≤–∞–Ω–∞, –≤—Ç—Ä–∞—á–µ–Ω–æ –∑–¥–æ—Ä–æ–≤'—è.")
        self.update_status()

    def run_program(self, program):
        if program not in self.running_programs:
            self.running_programs.append(program)
            self.message_label.config(text=f"üü¢ –ü—Ä–æ–≥—Ä–∞–º–∞ '{program}' –∑–∞–ø—É—â–µ–Ω–∞.", fg="green")
            self.log_event(f"üü¢ –ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–æ–≥—Ä–∞–º—É '{program}'.")

            if program == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
                self.open_calculator_window()
            elif program == "Dismur":
                self.open_discord_window()
            elif program == "goofli":
                self.open_goofli_window()

        else:
            self.message_label.config(text=f"‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–∞ '{program}' –≤–∂–µ –ø—Ä–∞—Ü—é—î.", fg="orange")
        self.update_status()

    def open_calculator_window(self):
        calc_win = tk.Toplevel(self.root)
        calc_win.title("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
        calc_win.geometry("250x300")

        entry = tk.Entry(calc_win, width=16, font=('Arial', 18), bd=4, relief=tk.RIDGE, justify='right')
        entry.grid(row=0, column=0, columnspan=4)

        buttons = [
            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('/', 1, 3),
            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('*', 2, 3),
            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('-', 3, 3),
            ('0', 4, 0), ('.', 4, 1), ('=', 4, 2), ('+', 4, 3)
        ]

        def on_click(char):
            if char == "=":
                try:
                    result = eval(entry.get())
                    entry.delete(0, tk.END)
                    entry.insert(tk.END, str(result))
                except:
                    entry.delete(0, tk.END)
                    entry.insert(tk.END, "Error")
            else:
                entry.insert(tk.END, char)

        for (text, row, col) in buttons:
            tk.Button(calc_win, text=text, width=5, height=2, font=('Arial', 14),
                      command=lambda ch=text: on_click(ch)).grid(row=row, column=col)

    def open_discord_window(self):
        dsc_win = tk.Toplevel(self.root)
        dsc_win.title("Discord")
        dsc_win.geometry("1000x800")

        chat_history = tk.Text(dsc_win, height=40, width=70, state='disabled', bg="#2f3136")
        chat_history.pack(pady=10)

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ –∫–æ–ª—å–æ—Ä—É
        chat_history.tag_config("user", foreground="#57f287", background="#3c3f45")  # Discord-–∑–µ–ª–µ–Ω–∏–π
        chat_history.tag_config("bot", foreground="#ffffff", background="#4f545c")  # Discord-—Å—ñ—Ä–∏–π

        entry = tk.Entry(dsc_win, width=30)
        entry.pack(pady=5)

        def send_message():
            user_msg = entry.get().strip().lower()
            if not user_msg:
                return

            entry.delete(0, tk.END)

            chat_history.config(state='normal')
            chat_history.insert(tk.END, f"–í—ã: {user_msg}\n", "user")

            known_phrases = {
                "–ø—Ä–∏–≤–µ—Ç": "–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
                "–∫—É": "–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
                "–Ω–æ—Ä–º": "–•–æ—Ä–æ—à–æ, —á–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?",
                "–∫–∞–∫ –¥–µ–ª–∞": "–£ –º–µ–Ω—è –≤—Å–µ –¥–æ–±—Ä–µ, —Å–ø–∞—Å–∏–±–æ üòä –ê —É —Ç–µ–±—è –∫–∞–∫ –¥–µ–ª–∞?",
                "–Ω–∞–ø–∏—à–∏ –∫–æ–¥ –¥–∏—Å–º—É—Ä": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –≤–∞–º —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
            }

            if user_msg.startswith("–ø–æ–º–æ–≥–∏ –º–Ω–µ —Å"):
                topic = user_msg.replace("–ø–æ–º–æ–≥–∏ –º–Ω–µ —Å", "").strip()
                if "–≤–∏—Ä—É—Å–∞–º–∏" in topic:
                    bot_reply = "–†–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å –∏ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É! üõ°Ô∏è"
                elif "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏" in topic:
                    bot_reply = "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ —É —Å–µ–±—è –∫–Ω–æ–ø–∫—É '–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è'."
                elif "–ø–∞–π—Ç–æ–Ω–æ–º" in topic or "python" in topic:
                    bot_reply = "–ü–æ—á–Ω–∏ —Å –æ—Å–Ω–æ–≤ –Ω–∞ —Å–∞–π—Ç–∞—Ö —Ç–∏–ø–∞ learnpython.org –∏–ª–∏ Stepik. üí°"
                else:
                    bot_reply = f"–Ø –µ—â—ë –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –ø–æ–º–æ—á—å –≤–∞–º —Å '{topic}', –Ω–æ –º–æ–≥—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–∞–π—Ç–∏!"
            elif user_msg.startswith("–Ω–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ –ø–∞–π—Ç–æ–Ω") or user_msg.startswith(
                    "–Ω–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–¥ –Ω–∞ –ø–∞–π—Ç–æ–Ω") or user_msg.startswith("–∫–æ–¥ –Ω–∞ –ø–∞–π—Ç–æ–Ω"):
                bot_reply = (
                    "–ö–æ–Ω–µ—á–Ω–æ, —è –º–æ–≥—É —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —ç—Ç–æ—Ç –∫–æ–¥ –¥–µ–ª–∞–ª? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                    "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ —Ç–æ–º, –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç —ç—Ç–æ–≥–æ –∫–æ–¥–∞. "
                    "–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç—å:\n\n"
                    "–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–¥ –Ω–∞ Python, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—á–∞—Ç–∞–µ—Ç '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!'\n"
                    "–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–¥ –Ω–∞ Python, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞.\n"
                    "–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–¥ –Ω–∞ Python, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞.\n"
                    "–ß–µ–º –±–æ–ª—å—à–µ –≤—ã –º–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ, —Ç–µ–º –ª—É—á—à–∏–π –∫–æ–¥ —è —Å–º–æ–≥—É –¥–ª—è –≤–∞—Å –Ω–∞–ø–∏—Å–∞—Ç—å."
                )
            elif user_msg.startswith(
                    "–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–¥ –Ω–∞ Python, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—á–∞—Ç–∞–µ—Ç '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!'") or user_msg.startswith(
                    "–∫–æ–¥ –Ω–∞ –ø–∞–π—Ç–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—á–∞—Ç–∞–µ—Ç '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!'") or user_msg.startswith(
                    "–∫–æ–¥ –Ω–∞ –ø–∞–π—Ç–æ–Ω –∫–æ—Ç–æ—Ä—ã–π –ø–µ—á–∞—Ç–∞–µ—Ç –ü—Ä–∏–≤–µ—Ç –º–∏—Ä") or user_msg.startswith(
                    "–∫–æ–¥ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –ü—Ä–∏–≤–µ—Ç –º–∏—Ä") or user_msg.startswith("–Ω–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –ø—Ä–∏–≤–µ—Ç –º–∏—Ä"):
                bot_reply = "–í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞:\n\nprint('–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!')"
            elif user_msg.startswith("–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–¥ –Ω–∞ Python, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞") or user_msg.startswith("–Ω–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–¥ –Ω–∞ –ø–∞–π–æ—Ç–Ω –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞") or user_msg.startswith("–¥–≤–∞ —á–∏—Å–ª–∞"):
                bot_reply = (
                    "–ö–æ–Ω–µ—á–Ω–æ! –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –Ω–∞ Python, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞:\n\n"
                    "üîπ **–≤–æ—Ç 1 —Å–ø–æ—Å–æ–±: –°–ø—Ä–æ—Å–∏—Ç—å —á–∏—Å–ª–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n"
                    "–≠—Ç–æ—Ç —Å–ø–æ—Å–æ–± –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –¥–≤–∞ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ç–µ–º –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n"
                    "```python\n"
                    "try:\n" 
                    "    num1 = float(input(\"–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: \"))\n"
                    "    num2 = float(input(\"–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: \"))\n"
                    "    print(\"–°—É–º–º–∞:\", num1 + num2)\n"
                    "except ValueError:\n"
                    "    print(\"–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!\")\n"
                    "```\n\n"
                    "–•–æ—á–µ—à—å, –ø–æ–∫–∞–∂—É –µ—â–µ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã?"
                )
            elif user_msg.startswith("–¥–∞"):
                bot_reply = (
                    "–í–æ—Ç –µ—â—ë –æ–¥–∏–Ω —Å–ø–æ—Å–æ–±:\n\n"
                    "üîπ **–°–ø–æ—Å–æ–± 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é**\n"
                    "```python\n"
                    "def add_numbers(a, b):\n"
                    "    return a + b\n\n"
                    "result = add_numbers(5, 3)\n"
                    "print(\"–°—É–º–º–∞:\", result)\n"
                    "```\n"
                    "–•–æ—á–µ—à—å, –ø–æ–∫–∞–∂—É —Å–ø–æ—Å–æ–± —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏?"
                )
            else:
                best_match = difflib.get_close_matches(user_msg, known_phrases.keys(), n=1, cutoff=0.7)
                bot_reply = known_phrases[best_match[0]] if best_match else "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."

            chat_history.insert(tk.END, f"–ë–æ—Ç: {bot_reply}\n", "bot")
            chat_history.see(tk.END)
            chat_history.config(state='disabled')


        tk.Button(dsc_win, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=send_message).pack()

    def close_program(self, program):
        if program in self.running_programs:
            self.running_programs.remove(program)
            self.message_label.config(text=f"üî¥ –ü—Ä–æ–≥—Ä–∞–º–∞ '{program}' –∑–∞–∫—Ä–∏—Ç–∞.", fg="green")
            self.log_event(f"üî¥ –ó–∞–∫—Ä–∏—Ç–æ –ø—Ä–æ–≥—Ä–∞–º—É '{program}'.")
        else:
            self.message_label.config(text=f"‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–∞ '{program}' –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.", fg="orange")
        self.update_status()

    def optimize_program(self, program):
        if program in self.running_programs:
            gain = random.randint(3, 6)
            self.health += gain
            self.message_label.config(text=f"‚öôÔ∏è –ü—Ä–æ–≥—Ä–∞–º–∞ '{program}' –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞! –ó–¥–æ—Ä–æ–≤'—è +{gain}", fg="blue")
            self.log_event(f"‚öôÔ∏è –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –ø—Ä–æ–≥—Ä–∞–º—É '{program}'. –û—Ç—Ä–∏–º–∞–Ω–æ {gain} –∑–¥–æ—Ä–æ–≤'—è.")
        else:
            self.message_label.config(text=f"‚ùå –ù–µ –º–æ–∂–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –Ω–µ–∑–∞–ø—É—â–µ–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É.", fg="red")
        self.update_status()

if __name__ == "__main__":
    root = tk.Tk()
    game = OSGame(root)
    root.mainloop()
